//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BusinessEntities.DataProvider {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DataProvider.IDataProvider")]
    public interface IDataProvider {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataProvider/GetData", ReplyAction="http://tempuri.org/IDataProvider/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataProvider/GetData", ReplyAction="http://tempuri.org/IDataProvider/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataProvider/GetUserByUserName", ReplyAction="http://tempuri.org/IDataProvider/GetUserByUserNameResponse")]
        Core.InfoModels.User GetUserByUserName(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataProvider/GetUserByUserName", ReplyAction="http://tempuri.org/IDataProvider/GetUserByUserNameResponse")]
        System.Threading.Tasks.Task<Core.InfoModels.User> GetUserByUserNameAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataProvider/FindUserById", ReplyAction="http://tempuri.org/IDataProvider/FindUserByIdResponse")]
        Core.InfoModels.User FindUserById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataProvider/FindUserById", ReplyAction="http://tempuri.org/IDataProvider/FindUserByIdResponse")]
        System.Threading.Tasks.Task<Core.InfoModels.User> FindUserByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataProvider/GetUserFriends", ReplyAction="http://tempuri.org/IDataProvider/GetUserFriendsResponse")]
        Core.InfoModels.User[] GetUserFriends(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataProvider/GetUserFriends", ReplyAction="http://tempuri.org/IDataProvider/GetUserFriendsResponse")]
        System.Threading.Tasks.Task<Core.InfoModels.User[]> GetUserFriendsAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataProvider/GetUserMovies", ReplyAction="http://tempuri.org/IDataProvider/GetUserMoviesResponse")]
        Core.InfoModels.Movie[] GetUserMovies(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataProvider/GetUserMovies", ReplyAction="http://tempuri.org/IDataProvider/GetUserMoviesResponse")]
        System.Threading.Tasks.Task<Core.InfoModels.Movie[]> GetUserMoviesAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataProvider/CreateNewUser", ReplyAction="http://tempuri.org/IDataProvider/CreateNewUserResponse")]
        void CreateNewUser(Core.InfoModels.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataProvider/CreateNewUser", ReplyAction="http://tempuri.org/IDataProvider/CreateNewUserResponse")]
        System.Threading.Tasks.Task CreateNewUserAsync(Core.InfoModels.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataProvider/FindByMovieName", ReplyAction="http://tempuri.org/IDataProvider/FindByMovieNameResponse")]
        Core.InfoModels.Movie FindByMovieName(string movieName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataProvider/FindByMovieName", ReplyAction="http://tempuri.org/IDataProvider/FindByMovieNameResponse")]
        System.Threading.Tasks.Task<Core.InfoModels.Movie> FindByMovieNameAsync(string movieName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataProvider/GetAllMovies", ReplyAction="http://tempuri.org/IDataProvider/GetAllMoviesResponse")]
        Core.InfoModels.Movie[] GetAllMovies();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataProvider/GetAllMovies", ReplyAction="http://tempuri.org/IDataProvider/GetAllMoviesResponse")]
        System.Threading.Tasks.Task<Core.InfoModels.Movie[]> GetAllMoviesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDataProviderChannel : BusinessEntities.DataProvider.IDataProvider, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataProviderClient : System.ServiceModel.ClientBase<BusinessEntities.DataProvider.IDataProvider>, BusinessEntities.DataProvider.IDataProvider {
        
        public DataProviderClient() {
        }
        
        public DataProviderClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DataProviderClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataProviderClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataProviderClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public Core.InfoModels.User GetUserByUserName(string username) {
            return base.Channel.GetUserByUserName(username);
        }
        
        public System.Threading.Tasks.Task<Core.InfoModels.User> GetUserByUserNameAsync(string username) {
            return base.Channel.GetUserByUserNameAsync(username);
        }
        
        public Core.InfoModels.User FindUserById(int id) {
            return base.Channel.FindUserById(id);
        }
        
        public System.Threading.Tasks.Task<Core.InfoModels.User> FindUserByIdAsync(int id) {
            return base.Channel.FindUserByIdAsync(id);
        }
        
        public Core.InfoModels.User[] GetUserFriends(int userId) {
            return base.Channel.GetUserFriends(userId);
        }
        
        public System.Threading.Tasks.Task<Core.InfoModels.User[]> GetUserFriendsAsync(int userId) {
            return base.Channel.GetUserFriendsAsync(userId);
        }
        
        public Core.InfoModels.Movie[] GetUserMovies(int userId) {
            return base.Channel.GetUserMovies(userId);
        }
        
        public System.Threading.Tasks.Task<Core.InfoModels.Movie[]> GetUserMoviesAsync(int userId) {
            return base.Channel.GetUserMoviesAsync(userId);
        }
        
        public void CreateNewUser(Core.InfoModels.User user) {
            base.Channel.CreateNewUser(user);
        }
        
        public System.Threading.Tasks.Task CreateNewUserAsync(Core.InfoModels.User user) {
            return base.Channel.CreateNewUserAsync(user);
        }
        
        public Core.InfoModels.Movie FindByMovieName(string movieName) {
            return base.Channel.FindByMovieName(movieName);
        }
        
        public System.Threading.Tasks.Task<Core.InfoModels.Movie> FindByMovieNameAsync(string movieName) {
            return base.Channel.FindByMovieNameAsync(movieName);
        }
        
        public Core.InfoModels.Movie[] GetAllMovies() {
            return base.Channel.GetAllMovies();
        }
        
        public System.Threading.Tasks.Task<Core.InfoModels.Movie[]> GetAllMoviesAsync() {
            return base.Channel.GetAllMoviesAsync();
        }
    }
}
